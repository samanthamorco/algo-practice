How to find all pairs on an integer array whose sum is equal to given number?

Example input:
numbers = [9,1,3,4,6,7,2,8,2]
sum = 10
pairs = {}

for number in numbers:
    print(pairs)
    additive = sum - number
    if additive in pairs:
        pairs[additive] = number
    elif number not in pairs:
        pairs[number] = None

print(pairs)


How to find repeated numbers in an array if it contains duplicates?

int[] array = {2,30,39,28,28,2,1,3,4,5,28};
Map<int,int> duplicates = new HashMap<int,int>();

for (int element : array) {
	if (duplicates.containsKey(element)) {
		duplicates.put(element, sduplicates.get(element) + 1);
	}
	duplicates.add(element, 1);
}

for (int e : duplicates) {
	if (duplicates.get(element) > 1) {
		System.out.println(e.getKey() + ": " + duplicates.get(element));
	}
}


Quicksort algorithm:

int[] array = {9,1,3,4,6,7,2,8,2};

public void quickSort(int leftIndex, int rightIndex) {

	if (rightIndex - leftIndex <= 0){
		return;
	}

	int pivotPosition = partition(array);
	quickSort(leftIndex, pivotPosition - 1);
	quickSort(pivotPosition + 1, rightIndex);
}

public int parition(int[] array) {
	int pivot = array[array.length() - 1];
	int leftPointer = 0;
	int rightPointer = pivot - 1;

	do {
		while (array[leftPointer] < pivot) {
			leftPointer = leftPointer + 1;
		}

		while (array[rightPointer] > pivot) {
			rightPointer = rightPointer - 1;
		}

		if (leftPointer >= rightPointer) {
			int temp = array[leftPointer];
			array[leftPointer] = pivot;
			pivot = temp;
			break;
		}
		else {
			int temp = array[leftPointer];
			array[leftPointer] = array[rightPointer];
			array[rightPointer] = temp;
		}
	} while (true);

	return leftPointer;
}


How to find kth smallest element in unsorted array?
Quickselect problem:

array = [1, 6, 4, 3, 2, 7, 10, 4, 54, 4]

def partition(left_index, right_index):
    pivot_index = right_index
    left_pointer = left_index
    right_pointer = right_index - 1

    while True:
        while array[left_pointer] <= array[pivot_index] and left_pointer != right_index:
            left_pointer += 1
        while array[right_pointer] >= array[pivot_index] and right_pointer != left_index:
            right_pointer -= 1

        if left_pointer >= right_pointer:
            temp_value = array[left_pointer]
            array[left_pointer] = array[pivot_index]
            array[pivot_index] = temp_value
            return left_pointer
        else:
            temp_value = array[left_pointer]
            array[left_pointer] = array[right_pointer]
            array[right_pointer] = temp_value

def quick_select(desired_index, left_index, right_index):

    if right_index - left_index <= 0:
        return array[left_index]

    pivot_index = partition(left_index, right_index)

    if pivot_index > desired_index:
        return quick_select(desired_index, left_index, pivot_index - 1)
    elif pivot_index < desired_index:
        return quick_select(desired_index, pivot_index + 1, right_index)
    else:
        return array[pivot_index]

quick_select(2, 0, len(array) - 1)


How to find common elements in three sorted arrays?

Examples:
input1 = {1, 5, 10, 20, 40, 80}
input2 = {6, 7, 20, 80, 100}
input3 = {3, 4, 15, 20, 30, 70, 80, 120}
Output: 20, 80

intersection = []
counter1 = 0
counter2 = 0
counter3 = 0

HashSet<int> input1set = new HashSet<int>();
HashSet<int> input2set = new HashSet<int>();

for (int i : input1) {
    input1set.put(i);
}
for (int i : input2) {
    input2set.put(i);
}
for (int i : input3) {
    if (input1set.get(i)) {
        if (input2set.get(i)) {
            System.out.println(i);
        }
    }
}


How find the first repeating element in array of integers?

input = [10, 5, 3, 4, 3, 5]
duplicates = set()

for element in input:
    if element in duplicates:
        print(element)
        break
    else:
        duplicates.add(element)


How to find the first non-repeating element in an array of integers?

List<Integer> input = new ArrayList<Integer>(Arrays.asList(10, 5, 3, 4, 3, 5, 6));
HashMap<Integer,ArrayList<Integer> duplicates = new HashMap<Integer,ArrayList<Integer>>();

for (int i=0, i < input.size(), i++) {
    if(duplicates.containsKey(element)) {
        duplicates.get(element)[0]++;
    }
    else {
        ArrayList<Integer> occurAndIndex = new ArrayList<Integer>();
        occurAndIndex.add(0, 1);
        occurAndIndex.add(1, i);
        duplicates.put(element, occurAndIndex);
    }
}

int tempLowestIndex = inputs.size();
int tempElement = 0;

for (Integer element : duplicates.entrySet()) {
    if(element.getValue()[0]) == 1 {
        if(element.getValue()[1] < tempLowestIndex) {
            tempElement = element.getKey();
        }
    }
}

System.out.println(tempElement);


Create a Pig Latiner

1. If a word starts with a consonant and a vowel, put the first letter of the word at the end of the word and add "ay."
Example: Happy = appyh + ay = appyhay

2. If a word starts with two consonants move the two consonants to the end of the word and add "ay."
Example: Child = Ildch + ay = Ildchay

3. If a word starts with a vowel add the word "way" at the end of the word.
Example: Awesome = Awesome +way = Awesomeway

pl_string = 'happy'
vowels = {'a', 'e', 'i', 'o', 'u'}

if pl_string[0].lower() not in vowels and pl_string[1].lower() in vowels:
    first_letter = pl_string[0]
    print(pl_string[1:] + '-' + pl_string[0] + 'ay')
elif pl_string[0].lower() in vowels:
    print(pl_string + '-way')
else:
    for index, letter in enumerate(pl_string):
        if letter in vowels:
            print(pl_string[index:] + '-' + pl_string[:index] + 'ay')


Change Return Program - The user enters a cost and then the amount of money given. The program will figure out the change and the number of quarters, dimes, nickels, pennies needed for the change.

cost = 9.48
given = 10

change_back = {'pennies': 0, 'nickels': 0, 'dimes': 0, 'quarters': 0}
change = {25: 'quarters', 1: 'dimes', 5: 'nickels', 1: 'pennies'}
remainder = (given * 100) - (cost * 100)

for denomination in change:
    while remainder >= denomination:
        change_back[change[denomination]] += 1
        remainder -= denomination

for k, v in change_back.items():
    print(k)
    print(v)


Number Names - Show how to spell out a number in English. You can use a preexisting implementation or roll your own, but you should support inputs up to at least one million (or the maximum value of your language's default bounded integer type, if that's less). Optional: Support for inputs other than positive integers (like zero, negative integers, and floating-point numbers).


to start: 1-100

numbers_single = {"1": "one", "2": "two", "3": "three", "4": "four", "5": "five", "6": "six", "7": "seven", "8": "eight", "9": "nine"}
numbers_double = {"10": "ten", "11": "eleven", "12": "twelve", "13": "thirteen", "14": "fourteen", "15": "fifteen", "16": "sixteen", "17": "seventeen", "18": "eighteen", "19": "nineteen", "2": "twenty", "3": "thirty", "4": "forty", "5": "fifty", "6": "sixty", "7": "seventy", "8": "eighty", "9": "ninety"}

def spell_number(number):
    number = str(number)
    x = ""

    if len(number) == 3:
        x = numbers_single[number[0]] + " hundred "
        if number[1:] in numbers_double:
            x += numbers_double[number[1:]]
        x += last_two_digits(number, x)

    elif len(number) == 2:
        if number[0:] in numbers_double:
            x = numbers_double[number[0:]]
        x += last_two_digits(number, x)

    else:
        x = numbers_single[number[0]]

    return x

def last_two_digits(number, x):
    if number[-2] in numbers_double and number[-1] in numbers_single:
        return numbers_double[number[-2]] + " " + numbers_single[number[-1]]
    else:
        return ""


print(spell_number(19))


Count Vowels - Enter a string and the program counts the number of vowels in the text. For added complexity have it report a sum of each vowel found.

vowels = {'a', 'e', 'i', 'o', 'u'}

def count_vowels(word):
    counter = 0
    for letter in word:
        if letter in vowels:
            counter += 1
    return counter

print(count_vowels('ham sandwich'))


An animal shelter holds only dogs and cats, and operates on a strictly “first in, first out” basis. People just adopt either the “oldest” (based on arrival time) of all animals at the shelter (they cannot select which type of animal they get in this scenario), or they can select whether they would prefer a dog or cat (and will receive the oldest animal of that type). In the latter scenario, they cannot select which specific animal they would like.

# NOT THE MOST EFFICIENT, HAVE TWO QUEUES ONE DOG, ONE CAT, KEEP TRACK OF TIME THERE

class Animal:
    def __init__(self, name, type):
        self.name = name
        self.type = type

dog1 = Animal('dog1', 'dog')
dog2 = Animal('dog2', 'dog')
dog3 = Animal('dog3', 'dog')
dog4 = Animal('dog4', 'dog')
cat1 = Animal('cat1', 'cat')
cat2 = Animal('cat2', 'cat')
cat3 = Animal('cat3', 'cat')

shelter1 = [cat2, cat3, dog4, dog3, cat1, dog2, dog1]
shelter2 = []

def shifting(choice, shelter_to, shelter_from):
    temp_animal = shelter_from.pop(0)
    while temp_animal.type != choice:
        shelter_to.append(temp_animal)
        temp_animal = shelter_from.pop(0)
    while shelter_from and shelter_to:
        shelter_to.append(shelter_from.pop(0))
    return temp_animal

def adopt_animal(choice=None):
    if choice == None:
        if shelter1:
            return shelter1.pop(0)
        else:
            return shelter2.pop(0)
    elif choice == 'dog':
        if shelter1:
            return shifting('dog', shelter2, shelter1)
        else:
            return shifting('dog', shelter1, shelter2)
    else:
        if shelter1:
            return shifting('cat', shelter2, shelter1)
        else:
            return shifting('cat', shelter1, shelter2)

print(adopt_animal().name)
print(adopt_animal('dog').name)
print(adopt_animal('cat').name)











